(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{445:function(t,v,_){"use strict";_.r(v);var a=_(34),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"核心概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),_("p",[t._v("DbMeta有几个核心概念，要掌握DbMeta的配置方法, 这几个概念是必须要了解的。")]),t._v(" "),_("h2",{attrs:{id:"元数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#元数据"}},[t._v("#")]),t._v(" 元数据")]),t._v(" "),_("p",[t._v("最重要的是元数据的概念。")]),t._v(" "),_("p",[t._v("元数据的概念比较大， "),_("strong",[t._v("它是描述数据的数据")]),t._v("，其实后面的这些概念，都是被包含在元数据中的，都是元数据在具体被描述数据下的具体命名。")]),t._v(" "),_("p",[t._v('年前，元宇宙的概念非常火热。需要拿捏的也是"元"这个概念， 不过元宇宙中的"元"的含义解读很多,个人认为,是对现实世界的一种描述, 这种描述可以数字化、结构化,从而利用数字化后的数据,借助AR,MR,VR,\n以及区块链、AI等技术在计算机的虚拟世界, 创造一个从人类感官体验上高度符合现实的世界。')]),t._v(" "),_("blockquote",[_("p",[t._v("元的英译就是meta。")])]),t._v(" "),_("p",[t._v("元宇宙的火热, 起源于facebook的更名。这件事，让我想起大刘的观点:")]),t._v(" "),_("blockquote",[_("p",[t._v("现在，摆在人类面前有两条路：成为星际文明，或者在虚拟世界越走越远。倘若人类在成为星际文明前，就实现了高度拟真的虚拟空间，大概率会是一场灾难，人类将永远被锁死在低等级文明的摇篮——元宇宙不是未来，也不该是未来。")])]),t._v(" "),_("p",[t._v('扯远了, DbMeta中的"元数据", 指的也是描述数据的数据。从DbMeta名字可以看出, 是描述数据库的元。表明DbMeta是从数据库出发。事实也正是如此，DbMeta是从MySql数据库表 的数据描述——即数据字典 出发,\n推导出一整套数据, 这个数据可以用以构建整个页面元素。')]),t._v(" "),_("h2",{attrs:{id:"元对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#元对象"}},[t._v("#")]),t._v(" 元对象")]),t._v(" "),_("p",[t._v("元对象就是描述对象的元数据。")]),t._v(" "),_("p",[t._v("在java开发中, 通常需要持久化的对象, 就对应一张表。所以, 元对象描述的就是有着表对应的对象。它来源于mysql表的内置字典信息。")]),t._v(" "),_("h2",{attrs:{id:"元字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#元字段"}},[t._v("#")]),t._v(" 元字段")]),t._v(" "),_("p",[t._v("如果理解了元对象的概念, 那么元字段也就不言而喻了。")]),t._v(" "),_("p",[t._v("元字段描述的就是对象中字段的元数据。它来源于mysql表中字段的字典信息。")]),t._v(" "),_("h2",{attrs:{id:"组件配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组件配置"}},[t._v("#")]),t._v(" 组件配置")]),t._v(" "),_("p",[t._v("组件配置，也叫UI配置，或者按前面的套路称为元组件，显然是描述组件的数据。这个数据是可以精确描述一个组件的。")]),t._v(" "),_("p",[t._v("但组件本身并没有业务含义，脱离了元对象和元字段，那么就像是ElementUI官方文档中演示的demo一样，没有业务意义。 因此组件配置按照是否有业务加持分为两种：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("组件全局配置")]),t._v("： 纯粹的组件配置，脱离元对象和元字段，它是系统为某个组件的默认配置")]),t._v(" "),_("li",[_("strong",[t._v("组件实例配置")]),t._v("： 组件配置+元对象和元字段，是具有实际业务的")])]),t._v(" "),_("blockquote",[_("p",[t._v("即："),_("code",[t._v("组件实例配置 = 组件全局配置 + 元对象/元字段 配置")])]),t._v(" "),_("p",[t._v("元对象的配置中，会对组件的配置形成一定的干预，最终生成的才是多方配置的结果。")])]),t._v(" "),_("p",[t._v("另外，按照组件的类别不同，组件配置又分为:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("容器组件配置")])]),t._v(" "),_("li",[_("strong",[t._v("域组件配置")])])]),t._v(" "),_("h2",{attrs:{id:"组件实例配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组件实例配置"}},[t._v("#")]),t._v(" 组件实例配置")]),t._v(" "),_("p",[t._v("也称为实例配置。")]),t._v(" "),_("p",[_("code",[t._v("组件实例配置 = 组件全局配置 + 元对象/元字段 配置")])]),t._v(" "),_("h3",{attrs:{id:"容器组件配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#容器组件配置"}},[t._v("#")]),t._v(" 容器组件配置")]),t._v(" "),_("p",[t._v("又称为容器配置。")]),t._v(" "),_("p",[t._v("容器组件对应元对象，也对应数据库表。DbMeta中的容器组件比如有: 表格(TableView)、搜索面板(SearchView)、表单(FormView)、树(TreeView)等。这些都是\nDbMeta内置组件库中的"),_("RouterLink",{attrs:{to:"/component/view/"}},[t._v("容器组件")]),t._v("。")],1),t._v(" "),_("h3",{attrs:{id:"域组件配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#域组件配置"}},[t._v("#")]),t._v(" 域组件配置")]),t._v(" "),_("p",[t._v("也称为域配置。")]),t._v(" "),_("p",[t._v("就是针对域组件的配置了。 DbMeta中内置了较为丰富的"),_("RouterLink",{attrs:{to:"/component/field/"}},[t._v("域组件")])],1),t._v(" "),_("h2",{attrs:{id:"功能配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#功能配置"}},[t._v("#")]),t._v(" 功能配置")]),t._v(" "),_("p",[t._v("功能配置是多个组件实例配置的组合，甚至是多个元对象下组件实例配置的组合。例如：")]),t._v(" "),_("p",[_("code",[t._v("单表功能配置 = 表格实例配置 + 搜索面板实例配置 + 表单实例配置")]),t._v("： 这一整套形成一个完整的功能模块。")]),t._v(" "),_("blockquote",[_("p",[t._v("不同的功能模板有不同的功能配置 数据结构。详见"),_("RouterLink",{attrs:{to:"/component/template/"}},[t._v("功能模板")])],1)]),t._v(" "),_("h2",{attrs:{id:"功能模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#功能模板"}},[t._v("#")]),t._v(" 功能模板")]),t._v(" "),_("p",[t._v("有了功能配置，也需要一个组件来承接这套配置，才能最终显示可用的模块。"),_("RouterLink",{attrs:{to:"/component/template/"}},[t._v("功能模板")]),t._v("就是承接功能配置的组件。因此:")],1),t._v(" "),_("p",[_("code",[t._v("功能模块 = 功能配置 + 功能模板")])]),t._v(" "),_("p",[t._v("至于功能模块，就不解释了，那就是一个完整的页面功能。")])])}),[],!1,null,null,null);v.default=e.exports}}]);