/** * $Id: JFinalProperties.java,v 1.0 2019-07-14 00:46 chenmin Exp $ */package com.dbmeta.starter.config;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.jfinal.kit.Prop;import com.jfinal.plugin.activerecord.dialect.Dialect;import com.jfinal.render.ViewType;import lombok.Data;import lombok.experimental.Accessors;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.util.ObjectUtils;import org.springframework.validation.annotation.Validated;import javax.validation.constraints.NotBlank;import java.util.List;import java.util.Map;/** * @author 陈敏 * @version $Id: JFinalProperties.java,v 1.1 2019-07-14 00:46 chenmin Exp $ * Created on 2019-07-14 00:46 * My blog： https://www.chenmin.info */@Slf4j@Data@Validated@Accessors(chain = true)@ConfigurationProperties(prefix = "jfinal")public class JFinalProperties extends Prop {    /**     * SQL模板路径     */    private List<String> sqlTemplates = Lists.newArrayList();    /**     * kit类全路径     */    private List<String> kitClasses = Lists.newArrayList();    /**     * 是否打开开发模式     */    private Boolean devMode = false;    /**     * 是否显示查询SQL     */    private Boolean showSql;    /**     * 数据库方言:默认支持MYSQL,ORACLE,SQLSERVER,SQLITE,POSTGRESQL     */    private Class<? extends Dialect> dialect;    private Boolean injectDependency = false;    private String baseUploadPath;    private String baseDownloadPath;    private Integer maxPostSize;    private Integer delayInSeconds;    private String defaultBaseName;    private String defaultLocale;    private Boolean injectSuperClass;    private Boolean reportAfterInvocation;    private String datePattern;    private String urlParaSeparator;    private String viewExtension;    private ViewType viewType;    private Boolean clearAfterMapping;    private Boolean mappingSuperClass;    private Boolean createSession;    private String baseTemplatePath;    private Boolean sessionInView;    /**     * 是否允许覆盖Request     */    private Boolean allowRequestOverride;    /**     * 是否允许覆盖Session     */    private Boolean allowSessionOverride;    /**     * 事务级别     */    private Integer transactionLevel;    /**     * 插件加载顺序     */    private Integer configPluginOrder;    /**     * 编码, 默认为: UTF-8     */    private String encoding;    /**     * Error View映射     */    private Map<Integer, String> errorViewMapping = Maps.newLinkedHashMap();    /**     * jfinal定制任务配置     */    private Map<String, TaskInfo> taskInfoMap = Maps.newLinkedHashMap();    private DbMeta dbMeta;    @Data    @Accessors(chain = true)    public static class TaskInfo {        /**         * 时间表达式         */        @NotBlank        private String cron;        /**         * 任务类         */        @NotBlank        private String task;        /**         * 是否开启守护进程         */        private Boolean daemon;        /**         * 是否开启任务,默认开启         */        private Boolean enable = true;        public TaskInfo() {        }        public TaskInfo(String cron, String task, boolean daemon, boolean enable) {            if (ObjectUtils.isEmpty(cron)) {                throw new IllegalArgumentException("cron 不能为空.");            }            if (ObjectUtils.isEmpty(task)) {                throw new IllegalArgumentException("task 不能为 null.");            }            this.cron = cron.trim();            this.task = task;            this.daemon = daemon;            this.enable = enable;        }    }    @Data    public static class DbMeta {        private Boolean configAllowReplace;        private Boolean componentAllowReplace;        private Boolean userLogin;        private Boolean userAuth;        private String uploadDir;        private String mainJdbcUrl;        private String mainJdbcUsername;        private String mainJdbcPassword;        private String bizDb;        private Map<String, BizDb> bizDbConfig;        @Data        public static class BizDb {            private String jdbcUrl;            private String jdbcUsername;            private String jdbcPassword;        }    }    public void initProp() {        try {            if (this.dbMeta == null) {                log.warn("spring配置文件中无db-meta配置项，将遵循db-meta默认配置文件加载规则");                return;            }            if (super.getBoolean("db-meta.loaded", false)) {                // 防止重复加载                return;            }            super.properties.setProperty("db-meta.loaded", "true");            super.properties.setProperty("devMode", String.valueOf(this.devMode));            super.properties.setProperty("config.allow.replace", String.valueOf(this.dbMeta.configAllowReplace));            super.properties.setProperty("upload.dir", this.dbMeta.uploadDir);            super.properties.setProperty("user.login", String.valueOf(this.dbMeta.userLogin));            super.properties.setProperty("user.auth", String.valueOf(this.dbMeta.userAuth));            super.properties.setProperty("component.allow.replace", String.valueOf(this.dbMeta.configAllowReplace));            super.properties.setProperty("show.sql", String.valueOf(this.showSql));            super.properties.setProperty("main.jdbc.url", this.dbMeta.mainJdbcUrl);            super.properties.setProperty("main.jdbc.username", this.dbMeta.mainJdbcUsername);            super.properties.setProperty("main.jdbc.password", this.dbMeta.mainJdbcPassword);            super.properties.setProperty("biz.db", this.dbMeta.bizDb);            if (this.dbMeta.getBizDbConfig() != null && !this.dbMeta.getBizDbConfig().isEmpty()) {                for (String bizDbName : this.dbMeta.getBizDbConfig().keySet()) {                    DbMeta.BizDb bizDb = this.dbMeta.getBizDbConfig().get(bizDbName);                    super.properties.setProperty(bizDbName + ".jdbc.url", bizDb.getJdbcUrl());                    super.properties.setProperty(bizDbName + ".jdbc.username", bizDb.getJdbcUsername());                    super.properties.setProperty(bizDbName + ".jdbc.password", bizDb.getJdbcPassword());                }            }        } catch (Exception e) {            log.error("spring配置文件中关于db-meta的配置项配置有误， 请检查！");            e.printStackTrace();        }    }    public boolean hasDbMetaConfig() {        return this.dbMeta != null;    }}